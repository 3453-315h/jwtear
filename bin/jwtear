#!/usr/bin/env ruby
#
# JWTear - A command-line tool and library to parse, create and manipulate JWT tokens for security testing purposes.
#
# @Author: KING SABRI - @KINGSABRI
#
lib = File.dirname(__FILE__) + '/../lib'
mod = File.dirname(__FILE__) + '/../modules'
if File.directory?(lib)
  unless $:.include?(lib)
    $:.unshift(lib)
    $:.unshift(mod)
  end
end
require 'jwtear'
require 'optparse'


options = {}
option_parser = OptionParser.new
option_parser.banner = "#{"JWTear".bold} - Parse, create and manipulate JWT tokens."
option_parser.set_summary_indent '   '
option_parser.separator "\nHelp menu:".underline
option_parser.on('-p', '--parse JWT_TOKEN' , 'Parse JWT token') {|v| options[:parse] = v}
option_parser.on('-t', '--generate-token', 'Generate JWT token.') {|v| options[:generate_token] = v}
option_parser.on('-s', '--generate-sig', 'Generate JWT signature.') {|v| options[:generate_sig] = v}
option_parser.on('-H', '--header HEADER',
                  'JWT header (JSON format). (required for generate-token and generate-sig)',
                  '  eg. {"typ":"JWT","alg":"HS256"} | Supported algorithms: [HS256, RS512, etc]'
) {|v| options[:header] = v}
option_parser.on('-P', '--payload PAYLOAD' ,
                    'JWT payload (JSON format). (required for generate-token and generate-sig)',
                    '  eg. {"login":"admin"}'
) {|v| options[:payload] = v}
option_parser.on('-g', '--alg ALGORITHM',
                  'Force algorithm type when generating a new token (ignore the one in header). (optional with generate-token)',
                  '  Supported algorithms: [HS256, HS384, HS512, RS256, RS384, RS512, ES256, ES384, ES512]'
) {|v| options[:alg] = v}
option_parser.on('-k', '--key SECRET',
                 'Secret Key for symmetric encryption. (required for generate-token and generate-sig. Accept password as a string or a file)',
                 '  eg. P@ssw0rd  | eg. public_key.pem'
) {|v| options[:key] = v}
# option_parser.on( '-m MODULE', '--module MODULE',
#                  "Use module - WIP",
#                  "Use it without argument to list all modules with its usage"
# ) {|v| options[:key] = v}
option_parser.on('-v', '--version', 'Check current and latest version') {|v| options[:version] = v}
option_parser.on('-h', '--help', 'Show this help message') {puts JWTear::Utils.banner , option_parser; exit!}
option_parser.on_tail "\nUsage:\n".underline + "jwtear <OPTIONS>"
option_parser.on_tail "\nExample:".underline
option_parser.on_tail %Q{jwtear --generate-token --header #{"'".bold}{"typ":"JWT","alg":"HS256"}#{"'".bold} --payload #{"'".bold}{"login":"admin"}#{"'".bold} --key 'P@ssw0rd!'}
option_parser.on_tail %Q{jwtear --generate-sig --header #{"'".bold}{"typ":"JWT","alg":"HS256"}#{"'".bold} --payload #{"'".bold}{"login":"admin"}#{"'".bold} --key 'P@ssw0rd!'}
option_parser.on_tail %Q{jwtear --parse #{"'".bold}eyJwI...6IfJ9#{'.'.bold}kxrMS...MjAMm#{'.'.bold}zEybN...TU2Njk3ZmE3OA#{"'".bold}\n\n}

begin
  option_parser.parse!
  include JWTear::Utils
  case
    when options[:version]
      puts "-[#{'Current version'.green}]----"
      puts JWTear::VERSION
      if latest_version == JWTear::VERSION
        puts "[+] ".dark_green + "You have latest version."
      else
        puts "-[#{'Latest version'.green}]----"
        puts latest_version
        puts "[+] ".dark_green + "Please update. (gem update jwtear)"
      end
    # parse
    when options[:parse]
      jwt = JWTear::JWT.new(options[:parse])
      jwt_parsed = jwt.parse
      puts "-[#{'Hash'.green}]----"
      puts jwt_parsed
      puts "-[#{'JSON'.green}]----"
      puts jwt.json
      puts ''
      puts "[+] ".dark_green + "Header (envelope segment):".bold.underline
      jwt.header.each {|key, value| puts "  #{'-'.bold} #{key}: #{value}"}
      puts "[+] ".dark_green + "Payload (claim segment):".bold.underline
      jwt.payload.each {|key, value| puts "  #{'-'.bold} #{key}: #{value}"}
      puts "[+] ".dark_green + "Signature (envelope segment) - encoded:".bold.underline
      puts encode(jwt.signature) || '---[ no signature ]---'

    # checking missing for generate_token
    when options[:generate_token] && (options[:header] || options[:payload] || options[:key]).nil?
      puts '[!] '.red + "Missing mandatory switch(es) '--header/--payload/--alg/--key'"

    # checking missing for generate_sig
    when options[:generate_sig] && (options[:header] || options[:payload] || options[:key]).nil?
      puts '[!] '.red + "Missing mandatory switch(es) '--header/--payload/--key'"

    when options[:generate_token]
      jwt = JWTear::JWT.new
      jwt.header  = options[:header]
      jwt.payload = options[:payload]
      jwt.alg     = options[:alg]
      if options[:key]
        jwt.key   = File.file?(options[:key])? File.read(options[:key]) : options[:key] # read key as a string or from file(eg. pub_key.pem)
      end
      token       = jwt.generate_token
      puts "-[#{'Hash'.dark_green}]----"
      puts jwt.hash
      puts "-[#{'JSON'.dark_green}]----"
      puts jwt.json
      puts ''
      puts "-[#{'Token'.green}]----"
      puts token

    when options[:generate_sig]
      jwt = JWTear::JWT.new
      data_encoded = encode_header_payload(options[:header], options[:payload])
      puts "-[#{'Signature'.green}]----"
      puts encode(jwt.generate_sig(data_encoded, options[:alg], options[:key]).signature)

    else
      puts JWTear::Utils.banner
      puts option_parser
  end
rescue OptionParser::MissingArgument => e
  e.args.each {|arg| puts '[!] '.red + "#{e.reason.capitalize} for '#{arg}' option."}
  puts option_parser
rescue OptionParser::InvalidOption => e
  puts '[!] '.red + "#{e}"
  puts option_parser
rescue Exception => e
  puts "[x] ".red + "Unknown Exception: option parser"
  puts '[!] '.yellow + 'Please report the issue at: https://github.com/KINGSABRI/jwtear/issues'.underline
  puts e.backtrace_locations
  puts e
end
